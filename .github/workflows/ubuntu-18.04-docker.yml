name: Ubuntu 18.04 (Docker)
on: [push, pull_request]
env:
  CONTAINER: ubuntu:18.04
  BUILD_TYPE: Release
  QT_VERSION: 5.12.5
  PYTHON_VERSION: 3.7
  PARALLEL_JOBS: 5

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    # By default, actions/checkout will only check out the last commit. For
    # pull requests, this is a temporary merge commit used to test integration
    # against the master branch. Therefore, in order to get the actual commit
    # message we are interested in, we need to fetch more than one commit.
    # Getting more commits can also be helpful for computing human-readable
    # commit ID, such as 2020-12-16.3 for the 4th commit of the day.
    - uses: actions/checkout@v4
      with:
        fetch-depth: 100

    - name: Print git log
      run: git log

    # In case of a push event, the commit we care about is simply HEAD.
    # The current branch name can be found by parsing GITHUB_REF, for example,
    # if we are on the master branch, then GITHUB_REF = refs/heads/master.
    - name: Get commit branch and commit message
      if: github.event_name == 'push'
      run: |
        echo "COMMIT_BRANCH=$(echo ${GITHUB_REF##*/})" >> $GITHUB_ENV
        echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV
        echo "$(git log --format=%B -n 1 HEAD)" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    # In case of a pull_request event, the commit we care about is HEAD^2, that
    # is, the second parent of the pull request merge commit.
    # The current branch name is directly given by GITHUB_HEAD_REF
    - name: Get commit branch and commit message
      if: github.event_name == 'pull_request'
      run: |
        echo "COMMIT_BRANCH=$GITHUB_HEAD_REF" >> $GITHUB_ENV
        echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV
        echo "$(git log --format=%B -n 1 HEAD^2)" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    # https://docs.github.com/en/free-pro-team@latest/actions/reference/environment-variables
    #
    # Note: in a Docker container, we have:
    # - ${{github.workspace}} = /home/runner/work/test-cpp-github-actions/test-cpp-github-actions
    # - $GITHUB_WORKSPACE     = /__w/test-cpp-github-actions/test-cpp-github-actions
    #
    # It's best to use ${{github.workspace}} in `working-directory`, and $GITHUB_WORKSPACE in `run`
    #
    - name: Print useful environment variables
      if:
      run: |
        echo "GITHUB_WORKFLOW:      $GITHUB_WORKFLOW"
        echo "GITHUB_RUN_ID:        $GITHUB_RUN_ID"
        echo "GITHUB_RUN_NUMBER:    $GITHUB_RUN_NUMBER"
        echo "GITHUB_ACTION:        $GITHUB_ACTION"
        echo "GITHUB_ACTIONS:       $GITHUB_ACTIONS"
        echo "GITHUB_ACTOR:         $GITHUB_ACTOR"
        echo "GITHUB_REPOSITORY:    $GITHUB_REPOSITORY"
        echo "GITHUB_EVENT_NAME:    $GITHUB_EVENT_NAME"
        echo "GITHUB_EVENT_PATH:    $GITHUB_EVENT_PATH"
        echo "GITHUB_WORKSPACE:     $GITHUB_WORKSPACE"
        echo "GITHUB_SHA:           $GITHUB_SHA"
        echo "GITHUB_REF:           $GITHUB_REF"
        echo "GITHUB_HEAD_REF:      $GITHUB_HEAD_REF"
        echo "GITHUB_BASE_REF:      $GITHUB_BASE_REF"
        echo "GITHUB_SERVER_URL:    $GITHUB_SERVER_URL"
        echo "GITHUB_API_URL:       $GITHUB_API_URL"
        echo "GITHUB_GRAPHQL_URL:   $GITHUB_GRAPHQL_URL"
        echo "COMMIT_BRANCH:        $COMMIT_BRANCH"
        echo "COMMIT_MESSAGE:       $COMMIT_MESSAGE"

    # We manually start a container and execute scripts in it instead of using `jobs.build.container`,
    # otherwise we couldn't use GitHub-provided actions (checkout, cache, etc.) as they rely on Node20
    # which would not necessarily be available on some containers (e.g., Ubuntu 18.04).
    #
    # See: https://github.com/actions/checkout/issues/1590
    #
    - name: Start Docker Container
      run: |
        docker pull $CONTAINER
        docker run --name build-container -d -v ${{ github.workspace }}:/workspace $CONTAINER tail -f /dev/null

    # See documentation at:
    # - https://apt.kitware.com/
    # - https://askubuntu.com/questions/355565/how-do-i-install-the-latest-version-of-cmake-from-the-command-line
    - name: Install Recent CMake
      env:
        SCRIPT: |
          apt-get install -y gpg wget
          wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null
          apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 6AF7F09730B3F0A4
          apt-add-repository "deb https://apt.kitware.com/ubuntu/ bionic main"
          apt-get update
          apt-get install -y cmake
      run: docker exec build-container bash -c "$SCRIPT"

    - name: Install Other Dependencies
      env:
        SCRIPT: |
          apt-get update
          apt-get install -y build-essential libfreetype6-dev libharfbuzz-dev
      run: docker exec build-container bash -c "$SCRIPT"

    - name: Setup Python
      env:
        SCRIPT: |
          apt-add-repository ppa:deadsnakes/ppa && \
          apt install -y python${{env.PYTHON_VERSION}} python${{env.PYTHON_VERSION}}-dev python${{env.PYTHON_VERSION}}-distutils && \
          update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 1 && \
          update-alternatives --install /usr/bin/python3 python3 /usr/bin/python${{env.PYTHON_VERSION}} 2
      run: docker exec build-container bash -c "$SCRIPT"

    # Note: we need libgl1-mesa-dev for QtGui, otherwise CMake configure step would fail with:
    #   CMake Error at qt/5.12.5/gcc_64/lib/cmake/Qt5Gui/Qt5GuiConfigExtras.cmake:9 (message):
    #   Failed to find "GL/gl.h" in "/usr/include/libdrm".
    #
    - name: Install Qt
      env:
        SCRIPT: |
          apt-get install -y libgl1-mesa-dev    # We need this for QtGui
          apt-get install -y libxkbcommon-x11-0 # We need this for Qt plugins/platforms/libqxcb.so
          wget --progress=dot:giga https://www.vgc.io/releases/qt/opt-qt-${{env.QT_VERSION}}-gcc_64.tar.gz
          tar -xzf opt-qt-${{env.QT_VERSION}}-gcc_64.tar.gz -C /workspace
      run: docker exec build-container bash -c "$SCRIPT"

    - name: Configure
      env:
        SCRIPT: |
          cd /workspace && mkdir build && cd build
          cmake --version
          cmake .. -DCMAKE_BUILD_TYPE="${{env.BUILD_TYPE}}" -DQt5_DIR="/workspace/qt/${{env.QT_VERSION}}/gcc_64/lib/cmake/Qt5"
      run: docker exec build-container bash -c "$SCRIPT"

    - name: Build
      env:
        SCRIPT: |
          cd /workspace/build
          cmake --build . --parallel ${{env.PARALLEL_JOBS}}
      run: docker exec build-container bash -c "$SCRIPT"

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: artifacts
        path: ${{github.workspace}}/build/*.so
