name: CMake

on: [push, pull_request]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      # Note: this only checks a single commit according to the doc:
      #   https://github.com/actions/checkout
      # I should use fetch-depth: 0 to check all commit, or a custom number
      # to check the desired number of commits. This would be useful in the
      # case of VGC since the build name depends on previous commits.

    - name: Get commit branch and commit message
      if: github.event_name == 'push'
      run: |
        echo "COMMIT_BRANCH=$(echo ${GITHUB_REF##*/})" >> $GITHUB_ENV
        echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV
        echo "${{github.event.head_commit.message}}" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    # https://github.community/t/accessing-commit-message-in-pull-request-event/17158
    - name: Get commit branch and commit message
      if: github.event_name == 'pull_request'
      run: |
        echo "COMMIT_BRANCH=$GITHUB_HEAD_REF" >> $GITHUB_ENV
        echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV
        echo "$(git log --format=%B -n 1 ${{ github.event.after }})" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    # https://docs.github.com/en/free-pro-team@latest/actions/reference/environment-variables
    - name: Print useful environment variables
      if:
      run: |
        echo "GITHUB_WORKFLOW:      $GITHUB_WORKFLOW"
        echo "GITHUB_RUN_ID:        $GITHUB_RUN_ID"
        echo "GITHUB_RUN_NUMBER:    $GITHUB_RUN_NUMBER"
        echo "GITHUB_ACTION:        $GITHUB_ACTION"
        echo "GITHUB_ACTIONS:       $GITHUB_ACTIONS"
        echo "GITHUB_ACTOR:         $GITHUB_ACTOR"
        echo "GITHUB_REPOSITORY:    $GITHUB_REPOSITORY"
        echo "GITHUB_EVENT_NAME:    $GITHUB_EVENT_NAME"
        echo "GITHUB_EVENT_PATH:    $GITHUB_EVENT_PATH"
        echo "GITHUB_WORKSPACE:     $GITHUB_WORKSPACE"
        echo "GITHUB_SHA:           $GITHUB_SHA"
        echo "GITHUB_REF:           $GITHUB_REF"
        echo "GITHUB_HEAD_REF:      $GITHUB_HEAD_REF"
        echo "GITHUB_BASE_REF:      $GITHUB_BASE_REF"
        echo "GITHUB_SERVER_URL:    $GITHUB_SERVER_URL"
        echo "GITHUB_API_URL:       $GITHUB_API_URL"
        echo "GITHUB_GRAPHQL_URL:   $GITHUB_GRAPHQL_URL"
        echo "COMMIT_BRANCH:        $COMMIT_BRANCH"
        echo "COMMIT_MESSAGE:       $COMMIT_MESSAGE"

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source
      # and build directories, but this is only available with CMake 3.13 and higher.
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE
