name: Windows

on: [push, pull_request]

# Note: by default, vcpkg (invoked by CMake, based on the manifest file) would
# compile the dependencies and store them in the "vcpkg binary cache" at
# `C:\Users\runneradmin\AppData\Local\vcpkg\archives\`. We define
# VCPKG_DEFAULT_BINARY_CACHE to override this cache location and make sure
# that it is part of our GitHub cache, see:
#    https://github.com/microsoft/vcpkg/blob/master/docs/users/binarycaching.md
#
# What options can be given to CMake to configure vcpkg?
#    https://vcpkg.io/en/docs/users/buildsystems/cmake-integration.html
#
# To try:
# --binarysource=clear
#
env:
  BUILD_TYPE: Release
  MSVC_VERSION: 2019
  VCPKG_VERSION: 2022.05.10
  VCPKG_DEFAULT_BINARY_CACHE: D:/a/test-cpp-github-actions/test-cpp-github-actions/vcpkg/archives
  VCPKG_INSTALL_OPTIONS: --debug
  VCPKG_INSTALLED_DIR: D:/a/test-cpp-github-actions/test-cpp-github-actions/vcpkg/installed

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: windows-2019

    steps:

    # By default, actions/checkout will only check out the last commit. For
    # pull requests, this is a temporary merge commit used to test integration
    # against the master branch. Thefore, in order to get the actuall commit
    # message we are interested in, we need to fetch more than one commit.
    # Getting more commits can also be helpful for computing human-readable
    # commit ID, such as 2020-12-16.3 for the 4th commit of the day.
    - uses: actions/checkout@v2
      with:
        fetch-depth: 100

    - name: Print git log
      run: git log

    # In case of a push event, the commit we care about is simply HEAD.
    # The current branch name can be found by parsing GITHUB_REF, for example,
    # if we are on the master branch, then GITHUB_REF = refs/heads/master.
    - name: Get commit branch and commit message
      if: github.event_name == 'push'
      run: |
        echo "COMMIT_BRANCH=$(echo ${GITHUB_REF##*/})" >> $GITHUB_ENV
        echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV
        echo "$(git log --format=%B -n 1 HEAD)" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    # In case of a pull_request event, the commit we care about is HEAD^2, that
    # is, the second parent of the pull request merge commit.
    # The current branch name is directly given by GITHUB_HEAD_REF
    - name: Get commit branch and commit message
      if: github.event_name == 'pull_request'
      run: |
        echo "COMMIT_BRANCH=$GITHUB_HEAD_REF" >> $GITHUB_ENV
        echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV
        echo "$(git log --format=%B -n 1 HEAD^2)" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    # https://docs.github.com/en/free-pro-team@latest/actions/reference/environment-variables
    - name: Print useful environment variables
      if:
      run: |
        echo "GITHUB_WORKFLOW:      $GITHUB_WORKFLOW"
        echo "GITHUB_RUN_ID:        $GITHUB_RUN_ID"
        echo "GITHUB_RUN_NUMBER:    $GITHUB_RUN_NUMBER"
        echo "GITHUB_ACTION:        $GITHUB_ACTION"
        echo "GITHUB_ACTIONS:       $GITHUB_ACTIONS"
        echo "GITHUB_ACTOR:         $GITHUB_ACTOR"
        echo "GITHUB_REPOSITORY:    $GITHUB_REPOSITORY"
        echo "GITHUB_EVENT_NAME:    $GITHUB_EVENT_NAME"
        echo "GITHUB_EVENT_PATH:    $GITHUB_EVENT_PATH"
        echo "GITHUB_WORKSPACE:     $GITHUB_WORKSPACE"
        echo "GITHUB_SHA:           $GITHUB_SHA"
        echo "GITHUB_REF:           $GITHUB_REF"
        echo "GITHUB_HEAD_REF:      $GITHUB_HEAD_REF"
        echo "GITHUB_BASE_REF:      $GITHUB_BASE_REF"
        echo "GITHUB_SERVER_URL:    $GITHUB_SERVER_URL"
        echo "GITHUB_API_URL:       $GITHUB_API_URL"
        echo "GITHUB_GRAPHQL_URL:   $GITHUB_GRAPHQL_URL"
        echo "COMMIT_BRANCH:        $COMMIT_BRANCH"
        echo "COMMIT_MESSAGE:       $COMMIT_MESSAGE"

    - name: Set vckpg root
      run: |
        echo "VCPKG_ROOT=$(echo ${GITHUB_WORKSPACE}/vcpkg)" >> $GITHUB_ENV

    - name: Cache vcpkg
      id: cache-vcpkg
      uses: actions/cache@v3
      with:
        path: ${{env.VCPKG_ROOT}}
        key: cache-vgpkg-v3

    - if: ${{ steps.cache-vcpkg.outputs.cache-hit == 'true' }}
      name: List vcpkg installed packaged
      working-directory: ${{github.workspace}}
      run: |
        $VCPKG_ROOT/vcpkg.exe --vcpkg-root="$VCPKG_ROOT" list

    - if: ${{ steps.cache-vcpkg.outputs.cache-hit != 'true' }}
      name: Clone vcpkg
      working-directory: ${{github.workspace}}
      run: |
        git clone --depth=1 --branch "$VCPKG_VERSION" https://github.com/microsoft/vcpkg.git
        cd vcpkg
        mkdir archives

    - if: ${{ steps.cache-vcpkg.outputs.cache-hit != 'true' }}
      name: Bootstrap vcpkg
      working-directory: ${{env.VCPKG_ROOT}}
      shell: cmd
      run: |
        .\bootstrap-vcpkg.bat

    # # For now, we test with manual dependencies. Later, we want to use a manifest file
    # - name: Install vcpkg dependencies
    #   working-directory: ${{github.VCPKG_ROOT}}
    #   run: |
    #     vcpkg --vcpkg-root="$VCPKG_ROOT" install freetype --triplet=x64-windows

    - name: Setup Developer Command Prompt for VS
      uses: ilammy/msvc-dev-cmd@v1

    - name: Configure
      working-directory: ${{github.workspace}}
      run: |
        echo "vcpkg root = $VCPKG_ROOT"
        mkdir build
        cd build
        cmake --version
        cmake "$GITHUB_WORKSPACE" -G Ninja -DCMAKE_BUILD_TYPE="$BUILD_TYPE" -DCMAKE_TOOLCHAIN_FILE="$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake"

    - name: Build
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --parallel $PARALLEL_JOBS

    - name: List vcpkg installed packaged
      working-directory: ${{github.workspace}}
      run: |
        $VCPKG_ROOT/vcpkg.exe --vcpkg-root="$VCPKG_ROOT" list



